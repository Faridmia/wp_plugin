<?php
/**
 * Plugin Name: Book API Example
 * Description: Custom Post Type + REST API + Custom Controller example
 * Version: 1.0
 * Author: Farid
 */

// 1️⃣ Register CPT with REST support
add_action( 'init', 'my_book_cpt' );
function my_book_cpt() {
    $args = array(
        'public'       => true,
        'show_in_rest' => true,
        'label'        => 'Books',
        // custom controller use
        'rest_controller_class' => 'My_Book_Controller',
        'rest_base' => 'books'
    );
    register_post_type( 'book', $args );
}

// 2️⃣ Create custom REST controller
class My_Book_Controller extends WP_REST_Controller {

    public function __construct() {
        $this->namespace = 'wp/v2';
        $this->rest_base = 'books';
    }

    // Register routes
    public function register_routes() {
        register_rest_route( $this->namespace, '/' . $this->rest_base, array(
            array(
                'methods'             => WP_REST_Server::READABLE,
                'callback'            => array( $this, 'get_items' ),
                'permission_callback' => '__return_true',
            ),
            array(
                'methods'             => WP_REST_Server::CREATABLE,
                'callback'            => array( $this, 'create_item' ),
                'permission_callback' => function() {
                    return current_user_can( 'edit_posts' );
                },
            ),
        ) );

        register_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\d]+)', array(
            array(
                'methods'             => WP_REST_Server::READABLE,
                'callback'            => array( $this, 'get_item' ),
                'permission_callback' => '__return_true',
            ),
        ) );
    }

    // GET /books → list all
    public function get_items( $request ) {
        $posts = get_posts( array( 'post_type' => 'book', 'numberposts' => -1 ) );
        $data = array();
        foreach ( $posts as $post ) {
            $data[] = array(
                'id'    => $post->ID,
                'title' => $post->post_title,
            );
        }
        return rest_ensure_response( $data );
    }

    // GET /books/{id}
    public function get_item( $request ) {
        $id   = $request['id'];
        $post = get_post( $id );
        if ( $post && $post->post_type === 'book' ) {
            return rest_ensure_response( array(
                'id'    => $post->ID,
                'title' => $post->post_title,
                'content' => $post->post_content,
            ) );
        }
        return new WP_Error( 'not_found', 'Book not found', array( 'status' => 404 ) );
    }

    // POST /books
    public function create_item( $request ) {
        $post_id = wp_insert_post( array(
            'post_type'   => 'book',
            'post_title'  => sanitize_text_field( $request['title'] ),
            'post_content'=> sanitize_textarea_field( $request['content'] ),
            'post_status' => 'publish'
        ) );

        if ( $post_id ) {
            return rest_ensure_response( array( 'id' => $post_id, 'message' => 'Book created!' ) );
        }
        return new WP_Error( 'create_failed', 'Could not create book', array( 'status' => 500 ) );
    }
}

// 3️⃣ Make sure controller loads
add_action( 'rest_api_init', function() {
    $controller = new My_Book_Controller();
    $controller->register_routes();
} );

// 4️⃣ Fix discovery links using rest_route_for_post filter
function my_plugin_rest_route_for_post( $route, $post ) {
    if ( $post->post_type === 'book' ) {
        $route = '/wp/v2/books/' . $post->ID;
    }
    return $route;
}
add_filter( 'rest_route_for_post', 'my_plugin_rest_route_for_post', 10, 2 );
